// ‚úÖ /noona/logger/printBootSummary.mjs

import chalk from 'chalk';
import { table } from 'table';

/**
 * @typedef {Object} BootComponentStatus
 * @property {string} name - Name of the component.
 * @property {string} info - Informational message about the component.
 * @property {'ready' | 'fail' | 'warn' | 'unknown'} status - Component status enum.
 */

/**
 * Prints a themed boot summary styled for Noona services.
 *
 * Accepts an array of components with status states. Supported status values:
 * - 'ready'   ‚Üí üü¢ Ready
 * - 'fail'    ‚Üí üî¥ Failed
 * - 'warn'    ‚Üí üü° PublicKey Mode
 * - 'unknown' ‚Üí üü£ Unknown
 *
 * @param {BootComponentStatus[]} results - Array of boot status components.
 */
export function printBootSummary(results) {
    console.log('');
    console.log(chalk.cyan('[Noona-Portal] üß© Boot Summary\n'));

    const rows = [
        ['Component', 'Info', 'Status'],
        ...results.map(({ name, info, status }) => {
            let icon;
            switch (status) {
                case 'ready':
                    icon = chalk.green('üü¢ Ready');
                    break;
                case 'fail':
                    icon = chalk.red('üî¥ Failed');
                    break;
                case 'warn':
                    icon = chalk.yellow('üü° PublicKey Mode');
                    break;
                case 'unknown':
                default:
                    icon = chalk.magenta('üü£ Unknown');
                    break;
            }

            return [name, info, icon];
        })
    ];

    const config = {
        border: {
            topBody: '‚îÄ',
            topJoin: '‚î¨',
            topLeft: '‚îå',
            topRight: '‚îê',
            bottomBody: '‚îÄ',
            bottomJoin: '‚î¥',
            bottomLeft: '‚îî',
            bottomRight: '‚îò',
            bodyLeft: '‚îÇ',
            bodyRight: '‚îÇ',
            bodyJoin: '‚îÇ',
            joinBody: '‚îÄ',
            joinLeft: '‚îú',
            joinRight: '‚î§',
            joinJoin: '‚îº'
        },
        columns: {
            0: { width: 26 },
            1: { width: 66 },
            2: { width: 20 }
        }
    };

    console.log(table(rows, config));

    const failures = results.filter(r => r.status === 'fail');
    const warnings = results.filter(r => r.status === 'warn');
    const unknowns = results.filter(r => r.status === 'unknown');

    if (failures.length === 0 && warnings.length === 0 && unknowns.length === 0) {
        console.log(chalk.green(`üß†  Noona-Portal is online. All systems go.`));
    } else {
        const failMsg = failures.length ? `‚Ä¢ ${failures.length} failed` : '';
        const warnMsg = warnings.length ? `‚Ä¢ ${warnings.length} in publicKey mode` : '';
        const unkMsg = unknowns.length ? `‚Ä¢ ${unknowns.length} unknown` : '';
        console.log(chalk.yellow(`‚ö†Ô∏è  Boot completed with issues:\n   ${[failMsg, warnMsg, unkMsg].filter(Boolean).join('\n   ')}`));
    }

    console.log('');
}
